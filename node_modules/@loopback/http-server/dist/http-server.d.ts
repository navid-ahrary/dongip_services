/// <reference types="node" />
import * as http from 'http';
import { IncomingMessage, ServerResponse } from 'http';
import * as https from 'https';
import { AddressInfo, ListenOptions } from 'net';
export declare type RequestListener = (req: IncomingMessage, res: ServerResponse) => void;
/**
 * HTTP server options
 *
 */
export interface HttpOptions extends ListenOptions {
    protocol?: 'http';
}
/**
 * HTTPS server options
 *
 */
export interface HttpsOptions extends ListenOptions, https.ServerOptions {
    protocol: 'https';
}
/**
 * Possible server options
 *
 */
export declare type HttpServerOptions = HttpOptions | HttpsOptions;
/**
 * Supported protocols
 *
 */
export declare type HttpProtocol = 'http' | 'https';
/**
 * HTTP / HTTPS server used by LoopBack's RestServer
 */
export declare class HttpServer {
    private _listening;
    private _protocol;
    private _address;
    private requestListener;
    readonly server: http.Server | https.Server;
    private serverOptions;
    /**
     * @param requestListener
     * @param serverOptions
     */
    constructor(requestListener: RequestListener, serverOptions?: HttpServerOptions);
    /**
     * Starts the HTTP / HTTPS server
     */
    start(): Promise<void>;
    /**
     * Stops the HTTP / HTTPS server
     */
    stop(): Promise<void>;
    /**
     * Protocol of the HTTP / HTTPS server
     */
    readonly protocol: HttpProtocol;
    /**
     * Port number of the HTTP / HTTPS server
     */
    readonly port: number;
    /**
     * Host of the HTTP / HTTPS server
     */
    readonly host: string | undefined;
    /**
     * URL of the HTTP / HTTPS server
     */
    readonly url: string;
    /**
     * State of the HTTP / HTTPS server
     */
    readonly listening: boolean;
    /**
     * Address of the HTTP / HTTPS server
     */
    readonly address: string | AddressInfo | undefined;
}
