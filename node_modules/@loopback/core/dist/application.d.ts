import { Binding, Constructor, Context, Provider } from '@loopback/context';
import { Component } from './component';
import { LifeCycleObserver } from './lifecycle';
import { Server } from './server';
/**
 * Application is the container for various types of artifacts, such as
 * components, servers, controllers, repositories, datasources, connectors,
 * and models.
 */
export declare class Application extends Context implements LifeCycleObserver {
    readonly options: ApplicationConfig;
    /**
     * Create an application with the given parent context
     * @param parent - Parent context
     */
    constructor(parent: Context);
    /**
     * Create an application with the given configuration and parent context
     * @param config - Application configuration
     * @param parent - Parent context
     */
    constructor(config?: ApplicationConfig, parent?: Context);
    /**
     * Register a controller class with this application.
     *
     * @param controllerCtor - The controller class
     * (constructor function).
     * @param name - Optional controller name, default to the class name
     * @returns The newly created binding, you can use the reference to
     * further modify the binding, e.g. lock the value to prevent further
     * modifications.
     *
     * @example
     * ```ts
     * class MyController {
     * }
     * app.controller(MyController).lock();
     * ```
     */
    controller(controllerCtor: ControllerClass, name?: string): Binding;
    /**
     * Bind a Server constructor to the Application's master context.
     * Each server constructor added in this way must provide a unique prefix
     * to prevent binding overlap.
     *
     * @example
     * ```ts
     * app.server(RestServer);
     * // This server constructor will be bound under "servers.RestServer".
     * app.server(RestServer, "v1API");
     * // This server instance will be bound under "servers.v1API".
     * ```
     *
     * @param server - The server constructor.
     * @param name - Optional override for key name.
     * @returns Binding for the server class
     *
     */
    server<T extends Server>(ctor: Constructor<T>, name?: string): Binding<T>;
    /**
     * Bind an array of Server constructors to the Application's master
     * context.
     * Each server added in this way will automatically be named based on the
     * class constructor name with the "servers." prefix.
     *
     * @remarks
     * If you wish to control the binding keys for particular server instances,
     * use the app.server function instead.
     * ```ts
     * app.servers([
     *  RestServer,
     *  GRPCServer,
     * ]);
     * // Creates a binding for "servers.RestServer" and a binding for
     * // "servers.GRPCServer";
     * ```
     *
     * @param ctors - An array of Server constructors.
     * @returns An array of bindings for the registered server classes
     *
     */
    servers<T extends Server>(ctors: Constructor<T>[]): Binding[];
    /**
     * Retrieve the singleton instance for a bound server.
     *
     * @typeParam T - Server type
     * @param ctor - The constructor that was used to make the
     * binding.
     * @returns A Promise of server instance
     *
     */
    getServer<T extends Server>(target: Constructor<T> | string): Promise<T>;
    /**
     * Start the application, and all of its registered observers.
     */
    start(): Promise<void>;
    /**
     * Stop the application instance and all of its registered observers.
     */
    stop(): Promise<void>;
    private getLifeCycleObserverRegistry;
    /**
     * Add a component to this application and register extensions such as
     * controllers, providers, and servers from the component.
     *
     * @param componentCtor - The component class to add.
     * @param name - Optional component name, default to the class name
     *
     * @example
     * ```ts
     *
     * export class ProductComponent {
     *   controllers = [ProductController];
     *   repositories = [ProductRepo, UserRepo];
     *   providers = {
     *     [AUTHENTICATION_STRATEGY]: AuthStrategy,
     *     [AUTHORIZATION_ROLE]: Role,
     *   };
     * };
     *
     * app.component(ProductComponent);
     * ```
     */
    component(componentCtor: Constructor<Component>, name?: string): Binding<Component>;
    /**
     * Set application metadata. `@loopback/boot` calls this method to populate
     * the metadata from `package.json`.
     *
     * @param metadata - Application metadata
     */
    setMetadata(metadata: ApplicationMetadata): void;
    /**
     * Register a life cycle observer class
     * @param ctor - A class implements LifeCycleObserver
     * @param name - Optional name for the life cycle observer
     */
    lifeCycleObserver<T extends LifeCycleObserver>(ctor: Constructor<T>, name?: string): Binding<T>;
    /**
     * Add a service to this application.
     *
     * @param cls - The service or provider class
     *
     * @example
     *
     * ```ts
     * // Define a class to be bound via ctx.toClass()
     * @bind({scope: BindingScope.SINGLETON})
     * export class LogService {
     *   log(msg: string) {
     *     console.log(msg);
     *   }
     * }
     *
     * // Define a class to be bound via ctx.toProvider()
     * const uuidv4 = require('uuid/v4');
     * export class UuidProvider implements Provider<string> {
     *   value() {
     *     return uuidv4();
     *   }
     * }
     *
     * // Register the local services
     * app.service(LogService);
     * app.service(UuidProvider, 'uuid');
     *
     * export class MyController {
     *   constructor(
     *     @inject('services.uuid') private uuid: string,
     *     @inject('services.LogService') private log: LogService,
     *   ) {
     *   }
     *
     *   greet(name: string) {
     *     this.log(`Greet request ${this.uuid} received: ${name}`);
     *     return `${this.uuid}: ${name}`;
     *   }
     * }
     * ```
     */
    service<S>(cls: Constructor<S> | Constructor<Provider<S>>, name?: string): Binding<S>;
}
/**
 * Configuration for application
 */
export interface ApplicationConfig {
    /**
     * Other properties
     */
    [prop: string]: any;
}
export declare type ControllerClass = Constructor<any>;
/**
 * Type definition for JSON
 */
export declare type JSONPrimitive = string | number | boolean | null;
export declare type JSONValue = JSONPrimitive | JSONObject | JSONArray;
export interface JSONObject {
    [property: string]: JSONValue;
}
export interface JSONArray extends Array<JSONValue> {
}
/**
 * Type description for `package.json`
 */
export interface ApplicationMetadata extends JSONObject {
    name: string;
    version: string;
    description: string;
}
