"use strict";
// Copyright IBM Corp. 2019. All Rights Reserved.
// Node module: @loopback/context
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
const context_1 = require("./context");
const interceptor_1 = require("./interceptor");
/**
 * A proxy handler that applies interceptors
 *
 * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Proxy
 */
class InterceptionHandler {
    constructor(context = new context_1.Context()) {
        this.context = context;
    }
    get(target, propertyName, receiver) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const targetObj = target;
        if (typeof propertyName !== 'string')
            return targetObj[propertyName];
        const propertyOrMethod = targetObj[propertyName];
        if (typeof propertyOrMethod === 'function') {
            return (...args) => {
                return interceptor_1.invokeMethodWithInterceptors(this.context, target, propertyName, args);
            };
        }
        else {
            return propertyOrMethod;
        }
    }
}
exports.InterceptionHandler = InterceptionHandler;
/**
 * Create a proxy that applies interceptors for method invocations
 * @param target - Target class or object
 * @param context - Context object
 */
function createProxyWithInterceptors(target, context) {
    return new Proxy(target, new InterceptionHandler(context));
}
exports.createProxyWithInterceptors = createProxyWithInterceptors;
//# sourceMappingURL=interception-proxy.js.map